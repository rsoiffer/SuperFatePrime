{"componentChunkName":"component---src-pages-gm-section-tsx","path":"/gm-section/","result":{"data":{"allFile":{"nodes":[{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Die = makeShortcode(\"Die\");\nvar Trait = makeShortcode(\"Trait\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-dcs\"\n  }, \"Setting DCs\"), mdx(\"p\", null, \"5 is easy, 10 is moderate, and 15 is very hard.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Someone rolling a pool of \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \", which represents an average competent PC hero, beats these DCs 98% of the time, 70%, and 12% respectively.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A supremely competent PC hero might roll \", mdx(Die, {\n    sides: 10,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 10,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \", beating these DCs 99% of the time, 90%, and 43% respectively.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A PC hero doing something they're absolutely \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"terrible\"), \" at rolls \", mdx(Die, {\n    sides: 4,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 4,\n    mdxType: \"Die\"\n  }), \" in the worst possible case. This beats DC 5 62% of the time, and can't possibly beat the other DCs.\")), mdx(\"h2\", {\n    \"id\": \"doom\"\n  }, \"Doom\"), mdx(\"p\", null, \"The GM tracks a Doom score, which represents the overall danger and tension of the story. When a PC rolls against a fixed DC, the GM can use the Doom score instead of choosing a number. When this happens:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Increase the Doom score by 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the player fails, roll \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Doom score decreases by the value rolled, but a negative narrative consequence occurs with severity proportional to the value rolled\")), mdx(\"p\", null, \"By combining Doom failures with complications, the GM can really screw over players for a single really really bad roll. On the other hand, the Doom score guarantees that most player rolls will end up being successes. Even the failed rolls will always advance the plot by adding narrative consequences.\"), mdx(\"h2\", {\n    \"id\": \"npc-stats\"\n  }, \"NPC Stats\"), mdx(\"p\", null, \"NPCs generally use the same stats as PCs, as they have traits and roll dice pools in the same way that PCs do. However, NPCs have different numbers corresponding to their strength.\"), mdx(\"p\", null, \"A mook NPC might only have a single \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" Distinction (which also acts as their name) and a single \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" Approach (\", mdx(Die, {\n    sides: 4,\n    mdxType: \"Die\"\n  }), \" to other Approaches), with no powers, specialities, or resources. This means the mook rolls \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" in the best case, or \", mdx(Die, {\n    sides: 4,\n    mdxType: \"Die\"\n  }), \" in the worst case. Mooks never have stress traits - they're always taken out in one hit. Instead, mooks have a number (usually ranging from 2 - 5) that represents roughly how many of them there are in the scene. When a mook would take stress, it instead subtracts 1 from its number.\"), mdx(\"p\", null, \"A final boss NPC has multiple \", mdx(Die, {\n    sides: 12,\n    mdxType: \"Die\"\n  }), \" Distinctions and Approaches rated the same as PCs. The boss would also likely have one or more \", mdx(Die, {\n    sides: 12,\n    mdxType: \"Die\"\n  }), \" Powers, as well as a few \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" Specialties or Resources. The boss could roll as much as \", mdx(Die, {\n    sides: 12,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 12,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 10,\n    mdxType: \"Die\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" in a single roll. Bosses have stress traits just like PCs. Major bosses may have the ability to shift stress between tracks - think the Hulk not taking damage but instead getting really really angry.\"), mdx(\"h3\", {\n    \"id\": \"example-mooks\"\n  }, \"Example Mooks\"), mdx(\"p\", null, mdx(Trait, {\n    name: \"Angry Street Thug\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" --- \", mdx(Trait, {\n    name: \"Forceful\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  })), mdx(\"p\", null, mdx(Trait, {\n    name: \"Flying Insect Soldier\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" --- \", mdx(Trait, {\n    name: \"Quick\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" --- \", mdx(Trait, {\n    name: \"Claws\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" \", mdx(Trait, {\n    name: \"Flight\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  })), mdx(\"p\", null, mdx(Trait, {\n    name: \"Spec-Ops Forces\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 6,\n    mdxType: \"Die\"\n  }), \" --- \", mdx(Trait, {\n    name: \"Careful\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  }), \" --- \", mdx(Trait, {\n    name: \"Rifle\",\n    mdxType: \"Trait\"\n  }), \" \", mdx(Die, {\n    sides: 8,\n    mdxType: \"Die\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#setting-dcs","title":"Setting DCs"},{"url":"#doom","title":"Doom"},{"url":"#npc-stats","title":"NPC Stats","items":[{"url":"#example-mooks","title":"Example Mooks"}]}]}}}]}},"pageContext":{}},"staticQueryHashes":[]}